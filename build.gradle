buildscript {
  repositories {
    jcenter()
    maven {
      name = 'forge'
      url = 'http://files.minecraftforge.net/maven'
    }
  }
  dependencies {
    classpath "net.minecraftforge.gradle:ForgeGradle:$project.forge_gradle_version"
    classpath "com.github.jengelman.gradle.plugins:shadow:$project.shadow_version"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$project.kotlin_version"
  }
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'

version project.mod_version
group project.mod_group
archivesBaseName = project.mod_name

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
  kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

minecraft {
  version = "${project.minecraft_version}-${project.forge_version}"
  runDir = 'run'
  mappings = project.mcp_mappings
  replace '@VERSION@', project.version
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$project.kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$project.kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-reflect:$project.kotlin_version"
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$project.kotlin_coroutines_version"
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$project.kotlin_coroutines_version"
  compile "org.jetbrains:annotations:$project.jetbrains_annotations_version"
}

processResources {
  // this will ensure that this task is redone when the versions change.
  inputs.property 'version', project.version
  inputs.property 'mcversion', minecraft.version

  // replace stuff in mcmod.info, nothing else
  from(sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'

    // replace version and mcversion
    expand 'version':project.version, 'mcversion':project.minecraft.version
  }

  // copy everything else except the mcmod.info
  from(sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }
}

shadowJar {
  baseName = project.mod_name
  classifier = project.mod_classifier
  version = project.version
  exclude 'dummyThing'
}

tasks.build.dependsOn shadowJar

artifacts {
  archives shadowJar
}

reobf {
  shadowJar {
    mappingType = "SEARGE"
  }
}

tasks.reobfShadowJar.mustRunAfter shadowJar
tasks.build.dependsOn reobfShadowJar